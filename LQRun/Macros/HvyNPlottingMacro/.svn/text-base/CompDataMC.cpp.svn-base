#include "MakeMCStack.hpp"
#include <TF1.h>
#include <TH1.h>
#include <TH2.h>
#include <TLegend.h>
#include <TFile.h>
#include <TDirectory.h>
#include <TTree.h>
#include <TEnv.h>
#include "THStack.h"
#include "TFile.h"
#include "TTree.h"
#include "TKey.h"
#include "TCanvas.h"

#include "TLatex.h"
#include "TImage.h"
#include "TLine.h"
#include "TColor.h"
#include "TROOT.h"
#include "TH2F.h"
#include "TMath.h"
#include "TGraphAsymmErrors.h"
#include "TList.h"
#include "TLegend.h"
#include "TStyle.h"
#include "TArrow.h"

#include <string>
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <map>

using namespace std;

void SetAtlasStyle();
TStyle* AtlasStyle();
TH1* MakeSumHist2(THStack* thestack);
TH1* MakeErrorBand(TH1* hnom, TH1* hup, TH1* hdown);
void SetNomBinError(TH1* hnom, TH1* hup, TH1* hdown);
void MakeLabel(TLatex label, float rhcol_x, float rhcol_y);
std::map<std::string,std::string> _htmls;


TCanvas* CompDataMC(TH1* hdata, vector<THStack*> mcstack,TH1* hup, TH1* hdown,TLegend* legend, const string hname, const int rebin, double xmin, double xmax,string path , string folder, bool logy, bool usedata) {
  
  SetAtlasStyle();

  string cname;
  if(hdata) cname= string("c_") + hdata->GetName();
  else cname = string("c_") + ((TNamed*)mcstack.at(0)->GetHists()->First())->GetName();
   
  //Create Canvases
  TCanvas* canvas = new TCanvas((cname+"significance").c_str(), (cname+"significance").c_str(), 800, 600);    

  std::string title=canvas->GetName();
  std::string tpdf = "/afs/hep.man.ac.uk/u/john/WWW/ATLAS/"+ path + "/histograms/"+folder+"/"+title+".pdf";  

  ///####################   Standard plot
  if(logy)canvas->SetLogy(); 
  canvas->cd();    


  //// %%%%%%%%%% TOP HALF OF PLOT %%%%%%%%%%%%%%%%%%
  TH1* h_nominal = MakeSumHist2(mcstack.at(0));
  
  TLatex label;
  MakeLabel(label, 0.2,0.8);
  
  TH1* errorband = MakeErrorBand(h_nominal,hup, hdown) ;  
  errorband->Draw("E2same");
  
  SetNomBinError(h_nominal, hup, hdown);

  if(usedata){
    hdata->Draw("p");
    mcstack.at(0)->Draw("HIST same");
    hdata->Draw("p same");
    hdata->Draw("axis same");  
  }
  else{
    
    errorband->Draw("E2");    
    mcstack.at(0)->Draw("same HIST");
    errorband->Draw("E2same");
  }


  if(usedata){
    
    //// %%%%%%%%%% BOTTOM (SIGNIFICANCE) HALF OF PLOT %%%%%%%%%%%%%%%%%%
    
    /// Make significance hist
    
    TH1* h_significance=(TH1F*)hdata->Clone();
    TH1* h_divup=(TH1F*)hup->Clone();
    TH1* h_divdown=(TH1F*)hdown->Clone();
    
    TH1* errorbandratio = (TH1*)h_nominal->Clone("AA");
    
    hdata->GetXaxis()->SetLabelSize(0.); ///
    hdata->GetXaxis()->SetTitle("");  
    
    h_divup->Divide(h_nominal);
    h_divdown->Divide(h_nominal);
    
    for(int i=1; i < errorbandratio->GetNbinsX()+1; i++){
      
      float bc = ((h_divup->GetBinContent(i)+h_divdown->GetBinContent(i))/2.);
      float bd = ((h_divup->GetBinContent(i)-h_divdown->GetBinContent(i))/2.);
      
      errorbandratio->SetBinContent(i,bc);
      errorbandratio->SetBinError(i,bd);
    }
    
    errorbandratio->SetFillStyle(3354);
    errorbandratio->SetFillColor(kBlue-8);
    errorbandratio->SetMarkerStyle(0);
    
  for(int i=1; i < h_significance->GetNbinsX()+1; i++){
    float num = h_significance->GetBinContent(i) - h_nominal->GetBinContent(i);
    float denom = sqrt( (h_significance->GetBinError(i)*h_significance->GetBinError(i) + h_nominal->GetBinError(i)*h_nominal->GetBinError(i)));
    float sig = 0.;
    if(denom!=0.) sig = num / denom;
    h_significance->SetBinContent(i,sig);
  }

  
  
  
  // How large fraction that will be taken up by the data/MC ratio part
  double FIGURE2_RATIO = 0.35;
  double SUBFIGURE_MARGIN = 0.15;
  canvas->SetBottomMargin(FIGURE2_RATIO);
  TPad *p = new TPad( "p_test", "", 0, 0, 1, 1.0 - SUBFIGURE_MARGIN, 0, 0, 0);  // create new pad, fullsize to have equal font-sizes in both plots
  p->SetTopMargin(1-FIGURE2_RATIO);   // top-boundary (should be 1 - thePad->GetBottomMargin() )
  p->SetFillStyle(0);     // needs to be transparent
  p->Draw();
  p->cd();
  
  
  h_significance->SetFillColor(kGray+1);
  h_significance->SetLineColor(kGray+1);
  
  h_significance->GetYaxis()->SetNdivisions(10204);
  h_significance->GetYaxis()->SetTitle("Significance");
  h_significance->GetYaxis()->SetRangeUser(-4., 4.);
  h_significance->GetXaxis()->SetRangeUser(xmin, xmax);
  h_significance->Draw("hist");
  TLine *line = new TLine(h_significance->GetBinLowEdge(h_significance->GetXaxis()->GetFirst()),0.0,h_significance->GetBinLowEdge(h_significance->GetXaxis()->GetLast()+1),0.0);
  
  line->SetLineStyle(2);
  line->SetLineWidth(2);
  line->Draw();
  h_significance->Draw("histsame");
  }
  
  legend->Draw("same"); 
  canvas->Print(tpdf.c_str(), ".pdf");


  return canvas;

    
 
}


void SetAtlasStyle ()
{
  static TStyle* atlasStyle = 0;
  std::cout << "\nApplying ATLAS style settings...\n" << std::endl ;
  if ( atlasStyle==0 ) atlasStyle = AtlasStyle();
  gROOT->SetStyle("ATLAS");
  gROOT->ForceStyle();
}


TStyle* AtlasStyle() 
{
  TStyle *atlasStyle = new TStyle("ATLAS","Atlas style");

  // use plain black on white colors
  Int_t icol=0; // WHITE
  atlasStyle->SetFrameBorderMode(icol);
  atlasStyle->SetFrameFillColor(icol);
  atlasStyle->SetCanvasBorderMode(icol);
  atlasStyle->SetCanvasColor(icol);
  atlasStyle->SetPadBorderMode(icol);
  atlasStyle->SetPadColor(icol);
  atlasStyle->SetStatColor(icol);
  //atlasStyle->SetFillColor(icol); // don't use: white fill color for *all* objects

  // set the paper & margin sizes
  atlasStyle->SetPaperSize(20,26);

  // set margin sizes
  atlasStyle->SetPadTopMargin(0.05);
  atlasStyle->SetPadRightMargin(0.05);
  atlasStyle->SetPadBottomMargin(0.16);
  atlasStyle->SetPadLeftMargin(0.16);

  // set title offsets (for axis label)
  atlasStyle->SetTitleXOffset(1.6);
  atlasStyle->SetTitleYOffset(1.9);


  // use large fonts
  //Int_t font=72; // Helvetica italics
  Int_t font=42; // Helvetica
  Double_t tsize=0.04;
  atlasStyle->SetTextFont(font);

  atlasStyle->SetTextSize(tsize);
  atlasStyle->SetLabelFont(font,"x");
  atlasStyle->SetTitleFont(font,"x");
  atlasStyle->SetLabelFont(font,"y");
  atlasStyle->SetTitleFont(font,"y");
  atlasStyle->SetLabelFont(font,"z");
  atlasStyle->SetTitleFont(font,"z");
  
  atlasStyle->SetLabelSize(tsize,"x");
  atlasStyle->SetTitleSize(tsize,"x");
  atlasStyle->SetLabelSize(tsize,"y");
  atlasStyle->SetTitleSize(tsize,"y");
  atlasStyle->SetLabelSize(tsize,"z");
  atlasStyle->SetTitleSize(tsize,"z");

  // use bold lines and markers
  atlasStyle->SetMarkerStyle(20);
  atlasStyle->SetMarkerSize(1.2);
  atlasStyle->SetHistLineWidth(2.);
  atlasStyle->SetLineStyleString(2,"[12 12]"); // postscript dashes

  // get rid of X error bars 
  //atlasStyle->SetErrorX(0.001);
  // get rid of error bar caps
  atlasStyle->SetEndErrorSize(0.);

  // do not display any of the standard histogram decorations
  atlasStyle->SetOptTitle(0);
  //atlasStyle->SetOptStat(1111);
  atlasStyle->SetOptStat(0);
  //atlasStyle->SetOptFit(1111);
  atlasStyle->SetOptFit(0);

  // put tick marks on top and RHS of plots
  atlasStyle->SetPadTickX(1);
  atlasStyle->SetPadTickY(1);

  return atlasStyle;

}


TH1* MakeSumHist2(THStack* thestack){
  
  TH1* hsum=0;  
  TList* list = thestack->GetHists();
  TIter it(list, true);
  TObject* obj=0;
  while( (obj = it.Next()) ) {
    TH1* h = dynamic_cast<TH1*>(obj);
    if(!hsum) hsum = (TH1*)h->Clone( (string(h->GetName()) + "_sum").c_str() );
    else {
      hsum->Add(h, 1.0);
    }
  }//hist loop
  
  return hsum;
}

void SetNomBinError(TH1* hnom, TH1* hup, TH1* hdown){

  for(int i=1; i < hnom->GetNbinsX()+1; i++){        
    
    float err1 = fabs(hnom->GetBinContent(i)- hup->GetBinContent(i));
    float err2 = fabs(hnom->GetBinContent(i)- hdown->GetBinContent(i));
    
    if(err1 > err2 ) hnom->SetBinError(i, err1);
    if(err2 > err1 ) hnom->SetBinError(i, err2);    
  }
  return;
}

TH1* MakeErrorBand(TH1* hnom, TH1* hup, TH1* hdown){
  
  TH1* errorband = (TH1*)hnom->Clone("aa");

  for(int i=1; i < errorband->GetNbinsX()+1; i++){        
    
    float bin_content = (hup->GetBinContent(i)+ hdown->GetBinContent(i))/2.;
    float bin_error = (hup->GetBinContent(i)- hdown->GetBinContent(i))/2.;    
    
    errorband->SetBinContent(i,bin_content);
    errorband->SetBinError(i,bin_error);
  }
  
  errorband->SetFillStyle(3354);
  errorband->SetFillColor(kBlue-8);
  errorband->SetMarkerSize(0);
  errorband->SetMarkerStyle(0);
  errorband->SetLineColor(kWhite);  
  errorband->Draw("E2Same");
   
  return errorband;

}

void MakeLabel(TLatex label, float rhcol_x, float rhcol_y){

  label.SetTextSize(0.04);
  label.SetTextColor(2);
  label.SetTextFont(42);
  label.SetNDC();
  label.SetTextColor(1);
  label.DrawLatex(rhcol_x,rhcol_y,"#int L dt = 20.4 fb^{-1}");
  label.DrawLatex(rhcol_x + 0.2,rhcol_y ,"#sqrt{s}= 8 TeV");
  label.SetTextSize(0.045);

  label.DrawLatex(rhcol_x+0.115, rhcol_y + 0.09,"Internal");
  label.SetTextFont(72);
  label.DrawLatex(rhcol_x, rhcol_y + 0.09,"ATLAS");

  return;
}
