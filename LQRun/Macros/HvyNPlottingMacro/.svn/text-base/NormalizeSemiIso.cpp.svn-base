#include "NormalizeSemiIso.hpp"
#include "HistUtils.hpp"
#include "MakeMCStack.hpp"

#include "TCanvas.h"
#include "TH1.h"
#include "THStack.h"

#include <iostream>

using namespace std;

NormalizeSemiIso::NormalizeSemiIso() :
  m_mcfiles(),
  m_fdata(0),
  m_simpleFact(0)
{


}

void NormalizeSemiIso::setMCFiles(vector<pair<TFile*, int> >& mcfiles) {
  m_mcfiles = mcfiles;
}

void NormalizeSemiIso::setDataFile(TFile* file) {
  m_fdata = file;
}

TCanvas* NormalizeSemiIso::CompDataMC_SimpleNorm(std::string hname, const int rebin) {

  /// get data hist
  TH1* hdata = getDataHist(hname, rebin);
  /// get non-iso hist
  TH1* hdata_noniso = getNonIsoDataHist(hname, rebin);
  hdata_noniso->Scale(m_simpleFact);
  hdata_noniso->SetFillColor(kOrange);
  hdata_noniso->SetLineColor(kOrange);

  /// get MC stacck
  THStack* mcstack = MakeMCStack(m_mcfiles, hname, 1.0, rebin);
  mcstack->Add(hdata_noniso);

  string cname = string("c_") + hdata->GetName();
  TCanvas* c = new TCanvas(cname.c_str(), cname.c_str(), 600, 600);
  c->cd();
  if(hdata->GetMaximum() > mcstack->GetMaximum()) {
    hdata->Draw("p");
    mcstack->Draw("HIST same");    
    hdata->Draw("p same");
  } else {
    mcstack->Draw("HIST");
    hdata->Draw("p same");
  }
  return c;
}

void NormalizeSemiIso::calcSimpleFact(string hname) {

  THStack* mcstack = MakeMCStack(m_mcfiles, hname, 1.0, 1);

  /// get data hist
  TH1* hdata = getDataHist(hname);
  if(!hdata) return;

  /// get non-sio data hist
  TH1* hdata_noniso = getNonIsoDataHist(hname);
  if(!hdata_noniso) return;

  //// get integrals
  const double ndata = hdata->Integral();
  const double nnoniso = hdata_noniso->Integral();
  const double nmc = IntegralStack(mcstack);

  cout << "NormalizeSemiIso::calcSimpleFact:" << endl;
  cout << "N(data)   = " << ndata << endl;
  cout << "N(noniso) = " << nnoniso << endl;
  cout << "N(mc)     = " << nmc << endl;
  m_simpleFact = (ndata - nmc) / nnoniso;
  cout << "Norm factor = " << m_simpleFact << endl;
}


TH1* NormalizeSemiIso::getDataHist(string hname, int rebin) {

  TH1* hdata = dynamic_cast<TH1*>(m_fdata->Get(hname.c_str()));
  if(!hdata) {
    cerr << "ERROR getting data hist" << endl;
    return 0;
  }
  FixOverUnderFlows(hdata);
  hdata->Rebin(rebin);
  return hdata;
}

TH1* NormalizeSemiIso::getNonIsoDataHist(string hname, int rebin) {

  TH1* hdata = dynamic_cast<TH1*>(m_fdata->Get( (hname + "_NonIso").c_str()));
  if(!hdata) {
    cerr << "ERROR getting non-iso data hist" << endl;
    return 0;
  }
  FixOverUnderFlows(hdata);
  hdata->Rebin(rebin);
  return hdata;
}
