//
// File generated by /programs/root/bin/rootcint at Wed Nov 20 01:29:03 2013

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME srcdIPlotting_Dict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "Plotting_Dict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::StdPlots StdPlots;
      #else
      class StdPlots  {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~StdPlots() throw() {};
         ::TH1F* h_particles; //
         ::TH1F* h_pt; //
         ::TH1F* h_eta; //
         ::TH1F* h_phi; //
          double Mass_W; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::ElectronPlots ElectronPlots;
      #else
      class ElectronPlots  :  public ::StdPlots {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~ElectronPlots() throw() {};
         map< ::TString, ::TH1* > map_el; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::JetPlots JetPlots;
      #else
      class JetPlots  :  public ::StdPlots {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~JetPlots() throw() {};
         map< ::TString, ::TH1* > map_jet; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::MuonPlots MuonPlots;
      #else
      class MuonPlots  :  public ::StdPlots {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~MuonPlots() throw() {};
         map< ::TString, ::TH1* > map_muon; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::SignalPlots SignalPlots;
      #else
      class SignalPlots  :  public ::StdPlots {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~SignalPlots() throw() {};
         double dijetmass_tmp; //
         double dijetmass; //
         map< ::TString, ::TH1* > map_sig; //
         map< ::TString, ::TH2* > map_sig2; //
         map< ::TString, ::TH3* > map_sig3; //
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void StdPlots_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void StdPlots_Dictionary();
   static void delete_StdPlots(void *p);
   static void deleteArray_StdPlots(void *p);
   static void destruct_StdPlots(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::StdPlots*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::StdPlots) == sizeof(::ROOT::Shadow::StdPlots));
      ::StdPlots *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::StdPlots),0);
      static ::ROOT::TGenericClassInfo 
         instance("StdPlots", "./include/StdPlots.h", 9,
                  typeid(::StdPlots), DefineBehavior(ptr, ptr),
                  &StdPlots_ShowMembers, &StdPlots_Dictionary, isa_proxy, 4,
                  sizeof(::StdPlots) );
      instance.SetDelete(&delete_StdPlots);
      instance.SetDeleteArray(&deleteArray_StdPlots);
      instance.SetDestructor(&destruct_StdPlots);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::StdPlots*)
   {
      return GenerateInitInstanceLocal((::StdPlots*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::StdPlots*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void StdPlots_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::StdPlots*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void ElectronPlots_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ElectronPlots_Dictionary();
   static void *new_ElectronPlots(void *p = 0);
   static void *newArray_ElectronPlots(Long_t size, void *p);
   static void delete_ElectronPlots(void *p);
   static void deleteArray_ElectronPlots(void *p);
   static void destruct_ElectronPlots(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ElectronPlots*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::ElectronPlots) == sizeof(::ROOT::Shadow::ElectronPlots));
      ::ElectronPlots *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::ElectronPlots),0);
      static ::ROOT::TGenericClassInfo 
         instance("ElectronPlots", "./include/ElectronPlots.h", 10,
                  typeid(::ElectronPlots), DefineBehavior(ptr, ptr),
                  &ElectronPlots_ShowMembers, &ElectronPlots_Dictionary, isa_proxy, 4,
                  sizeof(::ElectronPlots) );
      instance.SetNew(&new_ElectronPlots);
      instance.SetNewArray(&newArray_ElectronPlots);
      instance.SetDelete(&delete_ElectronPlots);
      instance.SetDeleteArray(&deleteArray_ElectronPlots);
      instance.SetDestructor(&destruct_ElectronPlots);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ElectronPlots*)
   {
      return GenerateInitInstanceLocal((::ElectronPlots*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ElectronPlots*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ElectronPlots_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::ElectronPlots*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void JetPlots_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void JetPlots_Dictionary();
   static void *new_JetPlots(void *p = 0);
   static void *newArray_JetPlots(Long_t size, void *p);
   static void delete_JetPlots(void *p);
   static void deleteArray_JetPlots(void *p);
   static void destruct_JetPlots(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::JetPlots*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::JetPlots) == sizeof(::ROOT::Shadow::JetPlots));
      ::JetPlots *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::JetPlots),0);
      static ::ROOT::TGenericClassInfo 
         instance("JetPlots", "./include/JetPlots.h", 8,
                  typeid(::JetPlots), DefineBehavior(ptr, ptr),
                  &JetPlots_ShowMembers, &JetPlots_Dictionary, isa_proxy, 4,
                  sizeof(::JetPlots) );
      instance.SetNew(&new_JetPlots);
      instance.SetNewArray(&newArray_JetPlots);
      instance.SetDelete(&delete_JetPlots);
      instance.SetDeleteArray(&deleteArray_JetPlots);
      instance.SetDestructor(&destruct_JetPlots);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::JetPlots*)
   {
      return GenerateInitInstanceLocal((::JetPlots*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::JetPlots*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void JetPlots_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::JetPlots*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void MuonPlots_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void MuonPlots_Dictionary();
   static void *new_MuonPlots(void *p = 0);
   static void *newArray_MuonPlots(Long_t size, void *p);
   static void delete_MuonPlots(void *p);
   static void deleteArray_MuonPlots(void *p);
   static void destruct_MuonPlots(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MuonPlots*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::MuonPlots) == sizeof(::ROOT::Shadow::MuonPlots));
      ::MuonPlots *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::MuonPlots),0);
      static ::ROOT::TGenericClassInfo 
         instance("MuonPlots", "./include/MuonPlots.h", 9,
                  typeid(::MuonPlots), DefineBehavior(ptr, ptr),
                  &MuonPlots_ShowMembers, &MuonPlots_Dictionary, isa_proxy, 4,
                  sizeof(::MuonPlots) );
      instance.SetNew(&new_MuonPlots);
      instance.SetNewArray(&newArray_MuonPlots);
      instance.SetDelete(&delete_MuonPlots);
      instance.SetDeleteArray(&deleteArray_MuonPlots);
      instance.SetDestructor(&destruct_MuonPlots);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MuonPlots*)
   {
      return GenerateInitInstanceLocal((::MuonPlots*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MuonPlots*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void MuonPlots_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::MuonPlots*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void SignalPlots_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void SignalPlots_Dictionary();
   static void *new_SignalPlots(void *p = 0);
   static void *newArray_SignalPlots(Long_t size, void *p);
   static void delete_SignalPlots(void *p);
   static void deleteArray_SignalPlots(void *p);
   static void destruct_SignalPlots(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SignalPlots*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::SignalPlots) == sizeof(::ROOT::Shadow::SignalPlots));
      ::SignalPlots *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::SignalPlots),0);
      static ::ROOT::TGenericClassInfo 
         instance("SignalPlots", "./include/SignalPlots.h", 22,
                  typeid(::SignalPlots), DefineBehavior(ptr, ptr),
                  &SignalPlots_ShowMembers, &SignalPlots_Dictionary, isa_proxy, 4,
                  sizeof(::SignalPlots) );
      instance.SetNew(&new_SignalPlots);
      instance.SetNewArray(&newArray_SignalPlots);
      instance.SetDelete(&delete_SignalPlots);
      instance.SetDeleteArray(&deleteArray_SignalPlots);
      instance.SetDestructor(&destruct_SignalPlots);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SignalPlots*)
   {
      return GenerateInitInstanceLocal((::SignalPlots*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SignalPlots*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void SignalPlots_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::SignalPlots*)0x0)->GetClass();
   }

} // end of namespace ROOT

//______________________________________________________________________________
namespace ROOT {
   void ElectronPlots_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class ElectronPlots.
      typedef ::ROOT::Shadow::ElectronPlots ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::ElectronPlots*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "map_el", (void*)&sobj->map_el);
      R__insp.InspectMember("map<TString,TH1*>", (void*)&sobj->map_el, "map_el.", false);
      R__insp.GenericShowMembers("StdPlots", ( ::StdPlots * )( (::ElectronPlots*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ElectronPlots(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::ElectronPlots : new ::ElectronPlots;
   }
   static void *newArray_ElectronPlots(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::ElectronPlots[nElements] : new ::ElectronPlots[nElements];
   }
   // Wrapper around operator delete
   static void delete_ElectronPlots(void *p) {
      delete ((::ElectronPlots*)p);
   }
   static void deleteArray_ElectronPlots(void *p) {
      delete [] ((::ElectronPlots*)p);
   }
   static void destruct_ElectronPlots(void *p) {
      typedef ::ElectronPlots current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::ElectronPlots

//______________________________________________________________________________
namespace ROOT {
   void MuonPlots_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class MuonPlots.
      typedef ::ROOT::Shadow::MuonPlots ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::MuonPlots*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "map_muon", (void*)&sobj->map_muon);
      R__insp.InspectMember("map<TString,TH1*>", (void*)&sobj->map_muon, "map_muon.", false);
      R__insp.GenericShowMembers("StdPlots", ( ::StdPlots * )( (::MuonPlots*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MuonPlots(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MuonPlots : new ::MuonPlots;
   }
   static void *newArray_MuonPlots(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::MuonPlots[nElements] : new ::MuonPlots[nElements];
   }
   // Wrapper around operator delete
   static void delete_MuonPlots(void *p) {
      delete ((::MuonPlots*)p);
   }
   static void deleteArray_MuonPlots(void *p) {
      delete [] ((::MuonPlots*)p);
   }
   static void destruct_MuonPlots(void *p) {
      typedef ::MuonPlots current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MuonPlots

//______________________________________________________________________________
namespace ROOT {
   void JetPlots_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class JetPlots.
      typedef ::ROOT::Shadow::JetPlots ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::JetPlots*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "map_jet", (void*)&sobj->map_jet);
      R__insp.InspectMember("map<TString,TH1*>", (void*)&sobj->map_jet, "map_jet.", false);
      R__insp.GenericShowMembers("StdPlots", ( ::StdPlots * )( (::JetPlots*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_JetPlots(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::JetPlots : new ::JetPlots;
   }
   static void *newArray_JetPlots(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::JetPlots[nElements] : new ::JetPlots[nElements];
   }
   // Wrapper around operator delete
   static void delete_JetPlots(void *p) {
      delete ((::JetPlots*)p);
   }
   static void deleteArray_JetPlots(void *p) {
      delete [] ((::JetPlots*)p);
   }
   static void destruct_JetPlots(void *p) {
      typedef ::JetPlots current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::JetPlots

//______________________________________________________________________________
namespace ROOT {
   void SignalPlots_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class SignalPlots.
      typedef ::ROOT::Shadow::SignalPlots ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::SignalPlots*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dijetmass_tmp", &sobj->dijetmass_tmp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dijetmass", &sobj->dijetmass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "map_sig", (void*)&sobj->map_sig);
      R__insp.InspectMember("map<TString,TH1*>", (void*)&sobj->map_sig, "map_sig.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "map_sig2", (void*)&sobj->map_sig2);
      R__insp.InspectMember("map<TString,TH2*>", (void*)&sobj->map_sig2, "map_sig2.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "map_sig3", (void*)&sobj->map_sig3);
      R__insp.InspectMember("map<TString,TH3*>", (void*)&sobj->map_sig3, "map_sig3.", false);
      R__insp.GenericShowMembers("StdPlots", ( ::StdPlots * )( (::SignalPlots*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SignalPlots(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::SignalPlots : new ::SignalPlots;
   }
   static void *newArray_SignalPlots(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::SignalPlots[nElements] : new ::SignalPlots[nElements];
   }
   // Wrapper around operator delete
   static void delete_SignalPlots(void *p) {
      delete ((::SignalPlots*)p);
   }
   static void deleteArray_SignalPlots(void *p) {
      delete [] ((::SignalPlots*)p);
   }
   static void destruct_SignalPlots(void *p) {
      typedef ::SignalPlots current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SignalPlots

//______________________________________________________________________________
namespace ROOT {
   void StdPlots_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class StdPlots.
      typedef ::ROOT::Shadow::StdPlots ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::StdPlots*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*h_particles", &sobj->h_particles);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*h_pt", &sobj->h_pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*h_eta", &sobj->h_eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*h_phi", &sobj->h_phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Mass_W", &sobj->Mass_W);
   }

}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_StdPlots(void *p) {
      delete ((::StdPlots*)p);
   }
   static void deleteArray_StdPlots(void *p) {
      delete [] ((::StdPlots*)p);
   }
   static void destruct_StdPlots(void *p) {
      typedef ::StdPlots current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::StdPlots

namespace ROOT {
   void maplETStringcOTH1mUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplETStringcOTH1mUgR_Dictionary();
   static void *new_maplETStringcOTH1mUgR(void *p = 0);
   static void *newArray_maplETStringcOTH1mUgR(Long_t size, void *p);
   static void delete_maplETStringcOTH1mUgR(void *p);
   static void deleteArray_maplETStringcOTH1mUgR(void *p);
   static void destruct_maplETStringcOTH1mUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<TString,TH1*>*)
   {
      map<TString,TH1*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<TString,TH1*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<TString,TH1*>", -2, "/programs/root/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<TString,TH1*>), DefineBehavior(ptr, ptr),
                  0, &maplETStringcOTH1mUgR_Dictionary, isa_proxy, 0,
                  sizeof(map<TString,TH1*>) );
      instance.SetNew(&new_maplETStringcOTH1mUgR);
      instance.SetNewArray(&newArray_maplETStringcOTH1mUgR);
      instance.SetDelete(&delete_maplETStringcOTH1mUgR);
      instance.SetDeleteArray(&deleteArray_maplETStringcOTH1mUgR);
      instance.SetDestructor(&destruct_maplETStringcOTH1mUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<TString,TH1*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<TString,TH1*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplETStringcOTH1mUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<TString,TH1*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplETStringcOTH1mUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TString,TH1*> : new map<TString,TH1*>;
   }
   static void *newArray_maplETStringcOTH1mUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TString,TH1*>[nElements] : new map<TString,TH1*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplETStringcOTH1mUgR(void *p) {
      delete ((map<TString,TH1*>*)p);
   }
   static void deleteArray_maplETStringcOTH1mUgR(void *p) {
      delete [] ((map<TString,TH1*>*)p);
   }
   static void destruct_maplETStringcOTH1mUgR(void *p) {
      typedef map<TString,TH1*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<TString,TH1*>

namespace ROOT {
   void maplETStringcOTH2mUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplETStringcOTH2mUgR_Dictionary();
   static void *new_maplETStringcOTH2mUgR(void *p = 0);
   static void *newArray_maplETStringcOTH2mUgR(Long_t size, void *p);
   static void delete_maplETStringcOTH2mUgR(void *p);
   static void deleteArray_maplETStringcOTH2mUgR(void *p);
   static void destruct_maplETStringcOTH2mUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<TString,TH2*>*)
   {
      map<TString,TH2*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<TString,TH2*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<TString,TH2*>", -2, "/programs/root/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<TString,TH2*>), DefineBehavior(ptr, ptr),
                  0, &maplETStringcOTH2mUgR_Dictionary, isa_proxy, 0,
                  sizeof(map<TString,TH2*>) );
      instance.SetNew(&new_maplETStringcOTH2mUgR);
      instance.SetNewArray(&newArray_maplETStringcOTH2mUgR);
      instance.SetDelete(&delete_maplETStringcOTH2mUgR);
      instance.SetDeleteArray(&deleteArray_maplETStringcOTH2mUgR);
      instance.SetDestructor(&destruct_maplETStringcOTH2mUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<TString,TH2*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<TString,TH2*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplETStringcOTH2mUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<TString,TH2*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplETStringcOTH2mUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TString,TH2*> : new map<TString,TH2*>;
   }
   static void *newArray_maplETStringcOTH2mUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TString,TH2*>[nElements] : new map<TString,TH2*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplETStringcOTH2mUgR(void *p) {
      delete ((map<TString,TH2*>*)p);
   }
   static void deleteArray_maplETStringcOTH2mUgR(void *p) {
      delete [] ((map<TString,TH2*>*)p);
   }
   static void destruct_maplETStringcOTH2mUgR(void *p) {
      typedef map<TString,TH2*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<TString,TH2*>

namespace ROOT {
   void maplETStringcOTH3mUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplETStringcOTH3mUgR_Dictionary();
   static void *new_maplETStringcOTH3mUgR(void *p = 0);
   static void *newArray_maplETStringcOTH3mUgR(Long_t size, void *p);
   static void delete_maplETStringcOTH3mUgR(void *p);
   static void deleteArray_maplETStringcOTH3mUgR(void *p);
   static void destruct_maplETStringcOTH3mUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<TString,TH3*>*)
   {
      map<TString,TH3*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<TString,TH3*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<TString,TH3*>", -2, "/programs/root/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<TString,TH3*>), DefineBehavior(ptr, ptr),
                  0, &maplETStringcOTH3mUgR_Dictionary, isa_proxy, 0,
                  sizeof(map<TString,TH3*>) );
      instance.SetNew(&new_maplETStringcOTH3mUgR);
      instance.SetNewArray(&newArray_maplETStringcOTH3mUgR);
      instance.SetDelete(&delete_maplETStringcOTH3mUgR);
      instance.SetDeleteArray(&deleteArray_maplETStringcOTH3mUgR);
      instance.SetDestructor(&destruct_maplETStringcOTH3mUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<TString,TH3*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<TString,TH3*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplETStringcOTH3mUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<TString,TH3*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplETStringcOTH3mUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TString,TH3*> : new map<TString,TH3*>;
   }
   static void *newArray_maplETStringcOTH3mUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TString,TH3*>[nElements] : new map<TString,TH3*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplETStringcOTH3mUgR(void *p) {
      delete ((map<TString,TH3*>*)p);
   }
   static void deleteArray_maplETStringcOTH3mUgR(void *p) {
      delete [] ((map<TString,TH3*>*)p);
   }
   static void destruct_maplETStringcOTH3mUgR(void *p) {
      typedef map<TString,TH3*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<TString,TH3*>

/********************************************************
* src/Plotting_Dict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtablePlotting_Dict();

extern "C" void G__set_cpp_environmentPlotting_Dict() {
  G__cpp_reset_tagtablePlotting_Dict();
}
#include <new>
extern "C" int G__cpp_dllrevPlotting_Dict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* StdPlots */
static int G__Plotting_Dict_450_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   StdPlots* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new StdPlots(*(StdPlots*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) StdPlots(*(StdPlots*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__Plotting_DictLN_StdPlots));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Plotting_Dict_450_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((StdPlots*) G__getstructoffset())->Fill((Double_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Plotting_Dict_450_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((StdPlots*) G__getstructoffset())->Write();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef StdPlots G__TStdPlots;
static int G__Plotting_Dict_450_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (StdPlots*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((StdPlots*) (soff+(sizeof(StdPlots)*i)))->~G__TStdPlots();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (StdPlots*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((StdPlots*) (soff))->~G__TStdPlots();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ElectronPlots */
static int G__Plotting_Dict_627_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ElectronPlots* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ElectronPlots[n];
     } else {
       p = new((void*) gvp) ElectronPlots[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ElectronPlots;
     } else {
       p = new((void*) gvp) ElectronPlots;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__Plotting_DictLN_ElectronPlots));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Plotting_Dict_627_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ElectronPlots* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new ElectronPlots(*((TString*) G__int(libp->para[0])));
   } else {
     p = new((void*) gvp) ElectronPlots(*((TString*) G__int(libp->para[0])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__Plotting_DictLN_ElectronPlots));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Plotting_Dict_627_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ElectronPlots* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new ElectronPlots(*(ElectronPlots*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) ElectronPlots(*(ElectronPlots*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__Plotting_DictLN_ElectronPlots));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Plotting_Dict_627_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ElectronPlots& obj = ((ElectronPlots*) G__getstructoffset())->operator=(*(ElectronPlots*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Plotting_Dict_627_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<TString,TH1*>* pobj;
         const map<TString,TH1*> xobj = ((const ElectronPlots*) G__getstructoffset())->GetMap();
         pobj = new map<TString,TH1*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Plotting_Dict_627_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ElectronPlots*) G__getstructoffset())->Fill(*((TString*) G__int(libp->para[0])), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Plotting_Dict_627_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ElectronPlots*) G__getstructoffset())->Fill((Double_t) G__double(libp->para[0]), *((vector<snu::KElectron>*) G__int(libp->para[1]))
, (double) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Plotting_Dict_627_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ElectronPlots*) G__getstructoffset())->Write();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ElectronPlots G__TElectronPlots;
static int G__Plotting_Dict_627_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ElectronPlots*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ElectronPlots*) (soff+(sizeof(ElectronPlots)*i)))->~G__TElectronPlots();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ElectronPlots*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ElectronPlots*) (soff))->~G__TElectronPlots();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* JetPlots */
static int G__Plotting_Dict_642_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   JetPlots* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new JetPlots[n];
     } else {
       p = new((void*) gvp) JetPlots[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new JetPlots;
     } else {
       p = new((void*) gvp) JetPlots;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__Plotting_DictLN_JetPlots));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Plotting_Dict_642_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   JetPlots* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new JetPlots(*((TString*) G__int(libp->para[0])));
   } else {
     p = new((void*) gvp) JetPlots(*((TString*) G__int(libp->para[0])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__Plotting_DictLN_JetPlots));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Plotting_Dict_642_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   JetPlots* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new JetPlots(*(JetPlots*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) JetPlots(*(JetPlots*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__Plotting_DictLN_JetPlots));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Plotting_Dict_642_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const JetPlots& obj = ((JetPlots*) G__getstructoffset())->operator=(*(JetPlots*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Plotting_Dict_642_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((JetPlots*) G__getstructoffset())->Fill((Double_t) G__double(libp->para[0]), *((vector<snu::KJet>*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Plotting_Dict_642_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((JetPlots*) G__getstructoffset())->Fill(*((TString*) G__int(libp->para[0])), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Plotting_Dict_642_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<TString,TH1*>* pobj;
         const map<TString,TH1*> xobj = ((const JetPlots*) G__getstructoffset())->GetMap();
         pobj = new map<TString,TH1*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Plotting_Dict_642_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((JetPlots*) G__getstructoffset())->Write();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef JetPlots G__TJetPlots;
static int G__Plotting_Dict_642_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (JetPlots*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((JetPlots*) (soff+(sizeof(JetPlots)*i)))->~G__TJetPlots();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (JetPlots*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((JetPlots*) (soff))->~G__TJetPlots();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MuonPlots */
static int G__Plotting_Dict_648_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MuonPlots* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MuonPlots[n];
     } else {
       p = new((void*) gvp) MuonPlots[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MuonPlots;
     } else {
       p = new((void*) gvp) MuonPlots;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__Plotting_DictLN_MuonPlots));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Plotting_Dict_648_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MuonPlots* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MuonPlots(*((TString*) G__int(libp->para[0])));
   } else {
     p = new((void*) gvp) MuonPlots(*((TString*) G__int(libp->para[0])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__Plotting_DictLN_MuonPlots));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Plotting_Dict_648_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MuonPlots* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MuonPlots(*(MuonPlots*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) MuonPlots(*(MuonPlots*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__Plotting_DictLN_MuonPlots));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Plotting_Dict_648_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MuonPlots& obj = ((MuonPlots*) G__getstructoffset())->operator=(*(MuonPlots*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Plotting_Dict_648_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MuonPlots*) G__getstructoffset())->Fill(*((TString*) G__int(libp->para[0])), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Plotting_Dict_648_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<TString,TH1*>* pobj;
         const map<TString,TH1*> xobj = ((const MuonPlots*) G__getstructoffset())->GetMap();
         pobj = new map<TString,TH1*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Plotting_Dict_648_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MuonPlots*) G__getstructoffset())->Fill((Double_t) G__double(libp->para[0]), *((vector<snu::KMuon>*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Plotting_Dict_648_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MuonPlots*) G__getstructoffset())->Write();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MuonPlots G__TMuonPlots;
static int G__Plotting_Dict_648_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MuonPlots*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MuonPlots*) (soff+(sizeof(MuonPlots)*i)))->~G__TMuonPlots();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MuonPlots*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MuonPlots*) (soff))->~G__TMuonPlots();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SignalPlots */
static int G__Plotting_Dict_669_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SignalPlots* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SignalPlots[n];
     } else {
       p = new((void*) gvp) SignalPlots[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SignalPlots;
     } else {
       p = new((void*) gvp) SignalPlots;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__Plotting_DictLN_SignalPlots));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Plotting_Dict_669_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SignalPlots* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SignalPlots(*((TString*) G__int(libp->para[0])));
   } else {
     p = new((void*) gvp) SignalPlots(*((TString*) G__int(libp->para[0])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__Plotting_DictLN_SignalPlots));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Plotting_Dict_669_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<TString,TH1*>* pobj;
         const map<TString,TH1*> xobj = ((const SignalPlots*) G__getstructoffset())->GetMap();
         pobj = new map<TString,TH1*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Plotting_Dict_669_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SignalPlots* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SignalPlots(*(SignalPlots*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) SignalPlots(*(SignalPlots*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__Plotting_DictLN_SignalPlots));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Plotting_Dict_669_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SignalPlots& obj = ((SignalPlots*) G__getstructoffset())->operator=(*(SignalPlots*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Plotting_Dict_669_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SignalPlots*) G__getstructoffset())->Fill(*((snu::KEvent*) G__int(libp->para[0])), *(vector<snu::KMuon>*) libp->para[1].ref
, *(vector<snu::KJet>*) libp->para[2].ref, (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Plotting_Dict_669_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SignalPlots*) G__getstructoffset())->Fill(*((snu::KEvent*) G__int(libp->para[0])), *(vector<snu::KElectron>*) libp->para[1].ref
, *(vector<snu::KJet>*) libp->para[2].ref, (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Plotting_Dict_669_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SignalPlots*) G__getstructoffset())->Fill(*((snu::KEvent*) G__int(libp->para[0])), *(vector<snu::KMuon>*) libp->para[1].ref
, *(vector<snu::KElectron>*) libp->para[2].ref, *(vector<snu::KJet>*) libp->para[3].ref
, (Double_t) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Plotting_Dict_669_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SignalPlots*) G__getstructoffset())->Fill(*((TString*) G__int(libp->para[0])), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Plotting_Dict_669_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SignalPlots*) G__getstructoffset())->Fill(*((TString*) G__int(libp->para[0])), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Plotting_Dict_669_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SignalPlots*) G__getstructoffset())->Fill(*((TString*) G__int(libp->para[0])), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Plotting_Dict_669_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SignalPlots*) G__getstructoffset())->Write();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SignalPlots G__TSignalPlots;
static int G__Plotting_Dict_669_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SignalPlots*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SignalPlots*) (soff+(sizeof(SignalPlots)*i)))->~G__TSignalPlots();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SignalPlots*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SignalPlots*) (soff))->~G__TSignalPlots();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* StdPlots */

/* ElectronPlots */

/* JetPlots */

/* MuonPlots */

/* SignalPlots */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncPlotting_Dict {
 public:
  G__Sizep2memfuncPlotting_Dict(): p(&G__Sizep2memfuncPlotting_Dict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncPlotting_Dict::*p)();
};

size_t G__get_sizep2memfuncPlotting_Dict()
{
  G__Sizep2memfuncPlotting_Dict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancePlotting_Dict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__Plotting_DictLN_ElectronPlots))) {
     ElectronPlots *G__Lderived;
     G__Lderived=(ElectronPlots*)0x1000;
     {
       StdPlots *G__Lpbase=(StdPlots*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__Plotting_DictLN_ElectronPlots),G__get_linked_tagnum(&G__Plotting_DictLN_StdPlots),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__Plotting_DictLN_JetPlots))) {
     JetPlots *G__Lderived;
     G__Lderived=(JetPlots*)0x1000;
     {
       StdPlots *G__Lpbase=(StdPlots*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__Plotting_DictLN_JetPlots),G__get_linked_tagnum(&G__Plotting_DictLN_StdPlots),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__Plotting_DictLN_MuonPlots))) {
     MuonPlots *G__Lderived;
     G__Lderived=(MuonPlots*)0x1000;
     {
       StdPlots *G__Lpbase=(StdPlots*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__Plotting_DictLN_MuonPlots),G__get_linked_tagnum(&G__Plotting_DictLN_StdPlots),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__Plotting_DictLN_SignalPlots))) {
     SignalPlots *G__Lderived;
     G__Lderived=(SignalPlots*)0x1000;
     {
       StdPlots *G__Lpbase=(StdPlots*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__Plotting_DictLN_SignalPlots),G__get_linked_tagnum(&G__Plotting_DictLN_StdPlots),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetablePlotting_Dict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__Plotting_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__Plotting_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Plotting_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__Plotting_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Plotting_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__Plotting_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__Plotting_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Plotting_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__Plotting_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Plotting_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__Plotting_DictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__Plotting_DictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__Plotting_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__Plotting_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__Plotting_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__Plotting_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__Plotting_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__Plotting_DictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__Plotting_DictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__Plotting_DictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__Plotting_DictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::string>",117,G__get_linked_tagnum(&G__Plotting_DictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__Plotting_DictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__Plotting_DictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Plotting_DictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__Plotting_DictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Plotting_DictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__Plotting_DictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::vector<float> >",117,G__get_linked_tagnum(&G__Plotting_DictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<float> >",117,G__get_linked_tagnum(&G__Plotting_DictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__Plotting_DictLN_reverse_iteratorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Plotting_DictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__Plotting_DictLN_reverse_iteratorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Plotting_DictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<float,allocator<float> > >",117,G__get_linked_tagnum(&G__Plotting_DictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__Plotting_DictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__Plotting_DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Plotting_DictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__Plotting_DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Plotting_DictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::vector<int> >",117,G__get_linked_tagnum(&G__Plotting_DictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<int> >",117,G__get_linked_tagnum(&G__Plotting_DictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__Plotting_DictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Plotting_DictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__Plotting_DictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Plotting_DictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<int,allocator<int> > >",117,G__get_linked_tagnum(&G__Plotting_DictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__Plotting_DictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__Plotting_DictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__Plotting_DictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__Plotting_DictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__Plotting_DictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__Plotting_DictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__Plotting_DictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__Plotting_DictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__Plotting_DictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__Plotting_DictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__Plotting_DictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__Plotting_DictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__Plotting_DictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__Plotting_DictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__Plotting_DictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__Plotting_DictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__Plotting_DictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__Plotting_DictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__Plotting_DictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TH1*>",117,G__get_linked_tagnum(&G__Plotting_DictLN_maplETStringcOTH1mUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TH1*,less<TString> >",117,G__get_linked_tagnum(&G__Plotting_DictLN_maplETStringcOTH1mUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<snu::KElectron>",117,G__get_linked_tagnum(&G__Plotting_DictLN_vectorlEsnucLcLKElectroncOallocatorlEsnucLcLKElectrongRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__Plotting_DictLN_reverse_iteratorlEvectorlEsnucLcLKElectroncOallocatorlEsnucLcLKElectrongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Plotting_DictLN_vectorlEsnucLcLKElectroncOallocatorlEsnucLcLKElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__Plotting_DictLN_reverse_iteratorlEvectorlEsnucLcLKElectroncOallocatorlEsnucLcLKElectrongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Plotting_DictLN_vectorlEsnucLcLKElectroncOallocatorlEsnucLcLKElectrongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<snu::KJet>",117,G__get_linked_tagnum(&G__Plotting_DictLN_vectorlEsnucLcLKJetcOallocatorlEsnucLcLKJetgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__Plotting_DictLN_reverse_iteratorlEvectorlEsnucLcLKJetcOallocatorlEsnucLcLKJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Plotting_DictLN_vectorlEsnucLcLKJetcOallocatorlEsnucLcLKJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__Plotting_DictLN_reverse_iteratorlEvectorlEsnucLcLKJetcOallocatorlEsnucLcLKJetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Plotting_DictLN_vectorlEsnucLcLKJetcOallocatorlEsnucLcLKJetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<snu::KMuon>",117,G__get_linked_tagnum(&G__Plotting_DictLN_vectorlEsnucLcLKMuoncOallocatorlEsnucLcLKMuongRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__Plotting_DictLN_reverse_iteratorlEvectorlEsnucLcLKMuoncOallocatorlEsnucLcLKMuongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Plotting_DictLN_vectorlEsnucLcLKMuoncOallocatorlEsnucLcLKMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__Plotting_DictLN_reverse_iteratorlEvectorlEsnucLcLKMuoncOallocatorlEsnucLcLKMuongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Plotting_DictLN_vectorlEsnucLcLKMuoncOallocatorlEsnucLcLKMuongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TH2*>",117,G__get_linked_tagnum(&G__Plotting_DictLN_maplETStringcOTH2mUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH2mUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TH2*,less<TString> >",117,G__get_linked_tagnum(&G__Plotting_DictLN_maplETStringcOTH2mUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH2mUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TH3*>",117,G__get_linked_tagnum(&G__Plotting_DictLN_maplETStringcOTH3mUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH3mUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TH3*,less<TString> >",117,G__get_linked_tagnum(&G__Plotting_DictLN_maplETStringcOTH3mUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH3mUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* StdPlots */
static void G__setup_memvarStdPlots(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__Plotting_DictLN_StdPlots));
   { StdPlots *p; p=(StdPlots*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->h_particles)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__Plotting_DictLN_TH1F),-1,-1,1,"h_particles=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->h_pt)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__Plotting_DictLN_TH1F),-1,-1,1,"h_pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->h_eta)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__Plotting_DictLN_TH1F),-1,-1,1,"h_eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->h_phi)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__Plotting_DictLN_TH1F),-1,-1,1,"h_phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Mass_W)-(long)(p)),100,0,1,-1,G__defined_typename("Double_t"),-1,1,"Mass_W=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ElectronPlots */
static void G__setup_memvarElectronPlots(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__Plotting_DictLN_ElectronPlots));
   { ElectronPlots *p; p=(ElectronPlots*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__Plotting_DictLN_maplETStringcOTH1mUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUgRsPgRsPgR),G__defined_typename("map<TString,TH1*>"),-1,4,"map_el=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* JetPlots */
static void G__setup_memvarJetPlots(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__Plotting_DictLN_JetPlots));
   { JetPlots *p; p=(JetPlots*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__Plotting_DictLN_maplETStringcOTH1mUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUgRsPgRsPgR),G__defined_typename("map<TString,TH1*>"),-1,4,"map_jet=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MuonPlots */
static void G__setup_memvarMuonPlots(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__Plotting_DictLN_MuonPlots));
   { MuonPlots *p; p=(MuonPlots*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__Plotting_DictLN_maplETStringcOTH1mUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUgRsPgRsPgR),G__defined_typename("map<TString,TH1*>"),-1,4,"map_muon=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SignalPlots */
static void G__setup_memvarSignalPlots(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__Plotting_DictLN_SignalPlots));
   { SignalPlots *p; p=(SignalPlots*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"dijetmass_tmp=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"dijetmass=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__Plotting_DictLN_maplETStringcOTH1mUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUgRsPgRsPgR),G__defined_typename("map<TString,TH1*>"),-1,4,"map_sig=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__Plotting_DictLN_maplETStringcOTH2mUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH2mUgRsPgRsPgR),G__defined_typename("map<TString,TH2*>"),-1,4,"map_sig2=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__Plotting_DictLN_maplETStringcOTH3mUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH3mUgRsPgRsPgR),G__defined_typename("map<TString,TH3*>"),-1,4,"map_sig3=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarPlotting_Dict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncStdPlots(void) {
   /* StdPlots */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__Plotting_DictLN_StdPlots));
   G__memfunc_setup("StdPlots",829,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__Plotting_DictLN_StdPlots), -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StdPlots",829,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__Plotting_DictLN_StdPlots), -1, 0, 1, 1, 2, 0, "u 'TString' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__Plotting_DictLN_StdPlots), -1, 1, 1, 1, 4, 0, "u 'StdPlots' - 11 - obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StdPlots",829,G__Plotting_Dict_450_0_4, 105, G__get_linked_tagnum(&G__Plotting_DictLN_StdPlots), -1, 0, 1, 1, 1, 0, "u 'StdPlots' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fill",391,G__Plotting_Dict_450_0_5, 121, -1, -1, 0, 5, 1, 1, 0, 
"d - 'Double_t' 0 - weight i - 'Int_t' 0 - N "
"d - 'Double_t' 0 - pt d - 'Double_t' 0 - eta "
"d - 'Double_t' 0 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Write",523,G__Plotting_Dict_450_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~StdPlots", 955, G__Plotting_Dict_450_0_7, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncElectronPlots(void) {
   /* ElectronPlots */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__Plotting_DictLN_ElectronPlots));
   G__memfunc_setup("ElectronPlots",1358,G__Plotting_Dict_627_0_1, 105, G__get_linked_tagnum(&G__Plotting_DictLN_ElectronPlots), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ElectronPlots",1358,G__Plotting_Dict_627_0_2, 105, G__get_linked_tagnum(&G__Plotting_DictLN_ElectronPlots), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ElectronPlots",1358,G__Plotting_Dict_627_0_3, 105, G__get_linked_tagnum(&G__Plotting_DictLN_ElectronPlots), -1, 0, 1, 1, 1, 0, "u 'ElectronPlots' - 11 - ep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__Plotting_Dict_627_0_4, 117, G__get_linked_tagnum(&G__Plotting_DictLN_ElectronPlots), -1, 1, 1, 1, 1, 0, "u 'ElectronPlots' - 11 - obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMap",574,G__Plotting_Dict_627_0_5, 117, G__get_linked_tagnum(&G__Plotting_DictLN_maplETStringcOTH1mUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUgRsPgRsPgR), G__defined_typename("map<TString,TH1*>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fill",391,G__Plotting_Dict_627_0_6, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'TString' - 0 - name d - 'Double_t' 0 - value "
"d - 'Double_t' 0 - weight", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fill",391,G__Plotting_Dict_627_0_7, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - weight u 'vector<snu::KElectron,allocator<snu::KElectron> >' 'vector<snu::KElectron>' 0 - el "
"d - - 0 - rho", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Write",523,G__Plotting_Dict_627_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ElectronPlots", 1484, G__Plotting_Dict_627_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncJetPlots(void) {
   /* JetPlots */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__Plotting_DictLN_JetPlots));
   G__memfunc_setup("JetPlots",821,G__Plotting_Dict_642_0_1, 105, G__get_linked_tagnum(&G__Plotting_DictLN_JetPlots), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("JetPlots",821,G__Plotting_Dict_642_0_2, 105, G__get_linked_tagnum(&G__Plotting_DictLN_JetPlots), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("JetPlots",821,G__Plotting_Dict_642_0_3, 105, G__get_linked_tagnum(&G__Plotting_DictLN_JetPlots), -1, 0, 1, 1, 1, 0, "u 'JetPlots' - 11 - jp", "/Copy constructor", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__Plotting_Dict_642_0_4, 117, G__get_linked_tagnum(&G__Plotting_DictLN_JetPlots), -1, 1, 1, 1, 1, 0, "u 'JetPlots' - 11 - obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fill",391,G__Plotting_Dict_642_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - weight u 'vector<snu::KJet,allocator<snu::KJet> >' 'vector<snu::KJet>' 0 - jets", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fill",391,G__Plotting_Dict_642_0_6, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'TString' - 0 - name d - - 0 - value "
"d - - 0 - weight", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMap",574,G__Plotting_Dict_642_0_7, 117, G__get_linked_tagnum(&G__Plotting_DictLN_maplETStringcOTH1mUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUgRsPgRsPgR), G__defined_typename("map<TString,TH1*>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Write",523,G__Plotting_Dict_642_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~JetPlots", 947, G__Plotting_Dict_642_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMuonPlots(void) {
   /* MuonPlots */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__Plotting_DictLN_MuonPlots));
   G__memfunc_setup("MuonPlots",945,G__Plotting_Dict_648_0_1, 105, G__get_linked_tagnum(&G__Plotting_DictLN_MuonPlots), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MuonPlots",945,G__Plotting_Dict_648_0_2, 105, G__get_linked_tagnum(&G__Plotting_DictLN_MuonPlots), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MuonPlots",945,G__Plotting_Dict_648_0_3, 105, G__get_linked_tagnum(&G__Plotting_DictLN_MuonPlots), -1, 0, 1, 1, 1, 0, "u 'MuonPlots' - 11 - mp", "/Copy constructor", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__Plotting_Dict_648_0_4, 117, G__get_linked_tagnum(&G__Plotting_DictLN_MuonPlots), -1, 1, 1, 1, 1, 0, "u 'MuonPlots' - 11 - obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fill",391,G__Plotting_Dict_648_0_5, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'TString' - 0 - name d - - 0 - value "
"d - - 0 - weight", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMap",574,G__Plotting_Dict_648_0_6, 117, G__get_linked_tagnum(&G__Plotting_DictLN_maplETStringcOTH1mUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUgRsPgRsPgR), G__defined_typename("map<TString,TH1*>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fill",391,G__Plotting_Dict_648_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - weight u 'vector<snu::KMuon,allocator<snu::KMuon> >' 'vector<snu::KMuon>' 0 - muons", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Write",523,G__Plotting_Dict_648_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MuonPlots", 1071, G__Plotting_Dict_648_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSignalPlots(void) {
   /* SignalPlots */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__Plotting_DictLN_SignalPlots));
   G__memfunc_setup("SignalPlots",1136,G__Plotting_Dict_669_0_1, 105, G__get_linked_tagnum(&G__Plotting_DictLN_SignalPlots), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SignalPlots",1136,G__Plotting_Dict_669_0_2, 105, G__get_linked_tagnum(&G__Plotting_DictLN_SignalPlots), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMap",574,G__Plotting_Dict_669_0_3, 117, G__get_linked_tagnum(&G__Plotting_DictLN_maplETStringcOTH1mUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUgRsPgRsPgR), G__defined_typename("map<TString,TH1*>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SignalPlots",1136,G__Plotting_Dict_669_0_4, 105, G__get_linked_tagnum(&G__Plotting_DictLN_SignalPlots), -1, 0, 1, 1, 1, 0, "u 'SignalPlots' - 11 - sp", "/Copy constructor", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__Plotting_Dict_669_0_5, 117, G__get_linked_tagnum(&G__Plotting_DictLN_SignalPlots), -1, 1, 1, 1, 1, 0, "u 'SignalPlots' - 11 - obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fill",391,G__Plotting_Dict_669_0_6, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'snu::KEvent' - 0 - ev u 'vector<snu::KMuon,allocator<snu::KMuon> >' 'vector<snu::KMuon>' 1 - muons "
"u 'vector<snu::KJet,allocator<snu::KJet> >' 'vector<snu::KJet>' 1 - jets d - 'Double_t' 0 - weight", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fill",391,G__Plotting_Dict_669_0_7, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'snu::KEvent' - 0 - ev u 'vector<snu::KElectron,allocator<snu::KElectron> >' 'vector<snu::KElectron>' 1 - electrons "
"u 'vector<snu::KJet,allocator<snu::KJet> >' 'vector<snu::KJet>' 1 - jets d - 'Double_t' 0 - weight", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fill",391,G__Plotting_Dict_669_0_8, 121, -1, -1, 0, 5, 1, 1, 0, 
"u 'snu::KEvent' - 0 - ev u 'vector<snu::KMuon,allocator<snu::KMuon> >' 'vector<snu::KMuon>' 1 - muons "
"u 'vector<snu::KElectron,allocator<snu::KElectron> >' 'vector<snu::KElectron>' 1 - electrons u 'vector<snu::KJet,allocator<snu::KJet> >' 'vector<snu::KJet>' 1 - jets "
"d - 'Double_t' 0 - weight", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fill",391,G__Plotting_Dict_669_0_9, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'TString' - 0 - name d - - 0 - value "
"d - - 0 - weight", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fill",391,G__Plotting_Dict_669_0_10, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'TString' - 0 - name d - - 0 - value "
"d - - 0 - value2 d - - 0 - weight", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fill",391,G__Plotting_Dict_669_0_11, 121, -1, -1, 0, 5, 1, 1, 0, 
"u 'TString' - 0 - name d - - 0 - value "
"d - - 0 - value2 d - - 0 - value3 "
"d - - 0 - weight", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Write",523,G__Plotting_Dict_669_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SignalPlots", 1262, G__Plotting_Dict_669_0_13, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncPlotting_Dict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalPlotting_Dict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcPlotting_Dict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__Plotting_DictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_TH1F = { "TH1F" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_StdPlots = { "StdPlots" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__Plotting_DictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_vectorlEstringcOallocatorlEstringgRsPgR = { "vector<string,allocator<string> >" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<string,allocator<string> >::iterator>" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR = { "vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_reverse_iteratorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR = { "vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_snu = { "snu" , 110 , -1 };
G__linked_taginfo G__Plotting_DictLN_ElectronPlots = { "ElectronPlots" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_maplETStringcOTH1mUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUgRsPgRsPgR = { "map<TString,TH1*,less<TString>,allocator<pair<const TString,TH1*> > >" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_vectorlEsnucLcLKElectroncOallocatorlEsnucLcLKElectrongRsPgR = { "vector<snu::KElectron,allocator<snu::KElectron> >" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_reverse_iteratorlEvectorlEsnucLcLKElectroncOallocatorlEsnucLcLKElectrongRsPgRcLcLiteratorgR = { "reverse_iterator<vector<snu::KElectron,allocator<snu::KElectron> >::iterator>" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_JetPlots = { "JetPlots" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_vectorlEsnucLcLKJetcOallocatorlEsnucLcLKJetgRsPgR = { "vector<snu::KJet,allocator<snu::KJet> >" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_reverse_iteratorlEvectorlEsnucLcLKJetcOallocatorlEsnucLcLKJetgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<snu::KJet,allocator<snu::KJet> >::iterator>" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_MuonPlots = { "MuonPlots" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_vectorlEsnucLcLKMuoncOallocatorlEsnucLcLKMuongRsPgR = { "vector<snu::KMuon,allocator<snu::KMuon> >" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_reverse_iteratorlEvectorlEsnucLcLKMuoncOallocatorlEsnucLcLKMuongRsPgRcLcLiteratorgR = { "reverse_iterator<vector<snu::KMuon,allocator<snu::KMuon> >::iterator>" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_snucLcLKEvent = { "snu::KEvent" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_SignalPlots = { "SignalPlots" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_maplETStringcOTH2mUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH2mUgRsPgRsPgR = { "map<TString,TH2*,less<TString>,allocator<pair<const TString,TH2*> > >" , 99 , -1 };
G__linked_taginfo G__Plotting_DictLN_maplETStringcOTH3mUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH3mUgRsPgRsPgR = { "map<TString,TH3*,less<TString>,allocator<pair<const TString,TH3*> > >" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtablePlotting_Dict() {
  G__Plotting_DictLN_TString.tagnum = -1 ;
  G__Plotting_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__Plotting_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__Plotting_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__Plotting_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__Plotting_DictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__Plotting_DictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__Plotting_DictLN_TH1F.tagnum = -1 ;
  G__Plotting_DictLN_StdPlots.tagnum = -1 ;
  G__Plotting_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__Plotting_DictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__Plotting_DictLN_vectorlEstringcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G__Plotting_DictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__Plotting_DictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR.tagnum = -1 ;
  G__Plotting_DictLN_reverse_iteratorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__Plotting_DictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__Plotting_DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__Plotting_DictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR.tagnum = -1 ;
  G__Plotting_DictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__Plotting_DictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__Plotting_DictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__Plotting_DictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__Plotting_DictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__Plotting_DictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__Plotting_DictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__Plotting_DictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__Plotting_DictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__Plotting_DictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__Plotting_DictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__Plotting_DictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__Plotting_DictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__Plotting_DictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__Plotting_DictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__Plotting_DictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__Plotting_DictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__Plotting_DictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__Plotting_DictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__Plotting_DictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__Plotting_DictLN_snu.tagnum = -1 ;
  G__Plotting_DictLN_ElectronPlots.tagnum = -1 ;
  G__Plotting_DictLN_maplETStringcOTH1mUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUgRsPgRsPgR.tagnum = -1 ;
  G__Plotting_DictLN_vectorlEsnucLcLKElectroncOallocatorlEsnucLcLKElectrongRsPgR.tagnum = -1 ;
  G__Plotting_DictLN_reverse_iteratorlEvectorlEsnucLcLKElectroncOallocatorlEsnucLcLKElectrongRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__Plotting_DictLN_JetPlots.tagnum = -1 ;
  G__Plotting_DictLN_vectorlEsnucLcLKJetcOallocatorlEsnucLcLKJetgRsPgR.tagnum = -1 ;
  G__Plotting_DictLN_reverse_iteratorlEvectorlEsnucLcLKJetcOallocatorlEsnucLcLKJetgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__Plotting_DictLN_MuonPlots.tagnum = -1 ;
  G__Plotting_DictLN_vectorlEsnucLcLKMuoncOallocatorlEsnucLcLKMuongRsPgR.tagnum = -1 ;
  G__Plotting_DictLN_reverse_iteratorlEvectorlEsnucLcLKMuoncOallocatorlEsnucLcLKMuongRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__Plotting_DictLN_snucLcLKEvent.tagnum = -1 ;
  G__Plotting_DictLN_SignalPlots.tagnum = -1 ;
  G__Plotting_DictLN_maplETStringcOTH2mUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH2mUgRsPgRsPgR.tagnum = -1 ;
  G__Plotting_DictLN_maplETStringcOTH3mUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH3mUgRsPgRsPgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtablePlotting_Dict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_TString);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_TH1F);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__Plotting_DictLN_StdPlots),sizeof(StdPlots),-1,298752,(char*)NULL,G__setup_memvarStdPlots,G__setup_memfuncStdPlots);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_vectorlEstringcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_reverse_iteratorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_snu);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__Plotting_DictLN_ElectronPlots),sizeof(ElectronPlots),-1,298752,(char*)NULL,G__setup_memvarElectronPlots,G__setup_memfuncElectronPlots);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_maplETStringcOTH1mUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_vectorlEsnucLcLKElectroncOallocatorlEsnucLcLKElectrongRsPgR);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_reverse_iteratorlEvectorlEsnucLcLKElectroncOallocatorlEsnucLcLKElectrongRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__Plotting_DictLN_JetPlots),sizeof(JetPlots),-1,298752,(char*)NULL,G__setup_memvarJetPlots,G__setup_memfuncJetPlots);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_vectorlEsnucLcLKJetcOallocatorlEsnucLcLKJetgRsPgR);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_reverse_iteratorlEvectorlEsnucLcLKJetcOallocatorlEsnucLcLKJetgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__Plotting_DictLN_MuonPlots),sizeof(MuonPlots),-1,298752,(char*)NULL,G__setup_memvarMuonPlots,G__setup_memfuncMuonPlots);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_vectorlEsnucLcLKMuoncOallocatorlEsnucLcLKMuongRsPgR);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_reverse_iteratorlEvectorlEsnucLcLKMuoncOallocatorlEsnucLcLKMuongRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_snucLcLKEvent);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__Plotting_DictLN_SignalPlots),sizeof(SignalPlots),-1,298752,(char*)NULL,G__setup_memvarSignalPlots,G__setup_memfuncSignalPlots);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_maplETStringcOTH2mUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH2mUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__Plotting_DictLN_maplETStringcOTH3mUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH3mUgRsPgRsPgR);
}
extern "C" void G__cpp_setupPlotting_Dict(void) {
  G__check_setup_version(30051515,"G__cpp_setupPlotting_Dict()");
  G__set_cpp_environmentPlotting_Dict();
  G__cpp_setup_tagtablePlotting_Dict();

  G__cpp_setup_inheritancePlotting_Dict();

  G__cpp_setup_typetablePlotting_Dict();

  G__cpp_setup_memvarPlotting_Dict();

  G__cpp_setup_memfuncPlotting_Dict();
  G__cpp_setup_globalPlotting_Dict();
  G__cpp_setup_funcPlotting_Dict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncPlotting_Dict();
  return;
}
class G__cpp_setup_initPlotting_Dict {
  public:
    G__cpp_setup_initPlotting_Dict() { G__add_setup_func("Plotting_Dict",(G__incsetup)(&G__cpp_setupPlotting_Dict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initPlotting_Dict() { G__remove_setup_func("Plotting_Dict"); }
};
G__cpp_setup_initPlotting_Dict G__cpp_setup_initializerPlotting_Dict;

